/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Andrewlxlxl99 (https://sketchfab.com/Andrewlxlxl99)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/before-concert-0b02a83f045c42eb809f7aa23b81f65a
Title: Before concert
*/

import { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';

import MusicScene from '../assets/3d/before_concert.glb';

const MusicSet = ({ isRotating, setIsRotating, ...props }) => {
  const musicRef = useRef();  

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(MusicScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
      ? e.touches[0].clientX 
      : e.clientX;

    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);

  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating) {
      const clientX = e.touches 
      ? e.touches[0].clientX 
      : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      musicRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }

  const handleKeyDown = (e) => {
    if(e.key === 'ArrowLeft') {
      if(!isRotating) setIsRotating(true);
      musicRef.current.rotation.y += 0.01 * Math.PI;
    } else if(e.key === 'ArrowRight') {
      if(!isRotating) setIsRotating(true);
      musicRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  const handleKeyUp = (e) => {
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false);
    }
  }

  useFrame(() => {
    if(!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      musicRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = musicRef.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }

    }
  })

  useEffect(() => {
    const canvas = gl.domElement;

    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }

  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);


  return (
    <a.group ref={musicRef} {...props} >
      <group scale={0.01}>
        <mesh
          geometry={nodes.CombUp001_Comb_0.geometry}
          material={materials.Comb}
          position={[-12.429, 152.984, 1.087]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          geometry={nodes.Bass001_Bass_0.geometry}
          material={materials.Bass}
          position={[-95.117, 62.791, -43.537]}
          rotation={[-1.678, 0.019, 0]}
          scale={100}
        />
        <mesh 
          geometry={nodes.CombDown001_Comb_0.geometry}
          material={materials.Comb}
          position={[-11.684, 70.306, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          geometry={nodes.Scene_Scene_0.geometry}
          material={materials.Scene}
          position={[-41.909, 2.576, -5.338]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={81.755}
        />
      </group>
    </a.group>
  );
}

export default MusicSet;
